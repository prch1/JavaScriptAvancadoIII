{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;;;;;;;;;;AAAQA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEKC,a;AAET,uCAAYC,UAAZ,EAAuB;AAAA;;AAEnB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAa,aAAb;AACH;;;;6CAEQC,U,EAAW;AAAA;;AAEhB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;;AAEtC,gCAAIC,UAAW,MAAKN,WAAL,CACCO,WADD,CACa,CAAC,MAAKN,MAAN,CADb,EAC2B,WAD3B,EAECO,WAFD,CAEa,MAAKP,MAFlB,EAGCQ,GAHD,CAGKP,UAHL,CAAf;;AAKeI,oCAAQI,SAAR,GAAoB,aAAI;AACnBN;AACJ,6BAFD;;AAIAE,oCAAQK,OAAR,GAAkB,aAAI;AAClBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,yCAAP;AACH,6BAHD;AAKf,yBAhBM,CAAP;AAiBH;;;iDAGW;AAAA;;AACR,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;;AAGnC,gCAAIY,SAAS,OAAKjB,WAAL,CACCO,WADD,CACa,CAAC,OAAKN,MAAN,CADb,EAC2B,WAD3B,EAECO,WAFD,CAEa,OAAKP,MAFlB,EAGCiB,UAHD,EAAb;;AAKA,gCAAIC,cAAa,EAAjB;;AAEAF,mCAAOP,SAAP,GAAmB,aAAK;;AAEpB,oCAAIU,QAAQN,EAAEC,MAAF,CAASM,MAArB;;AAEA,oCAAGD,KAAH,EAAS;;AAEL,wCAAIE,OAAOF,MAAMG,KAAjB;;AAEAJ,gDAAYK,IAAZ,CAAiB,IAAI3B,UAAJ,CAAeyB,KAAKG,KAApB,EAA0BH,KAAKI,WAA/B,EAA4CJ,KAAKK,MAAjD,CAAjB;;AAEAP,0CAAMQ,QAAN;AAEH,iCARD,MAQK;AACD;AACJxB,4CAAQe,WAAR;AACG;AACN,6BAhBD;;AAkBAF,mCAAON,OAAP,GAAiB,aAAK;AAClBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,wCAAP;AACH,6BAHD;AAKH,yBAjCM,CAAP;AAkCH;;;iDAEU;AAAA;;AAEX,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;AACnC,gCAAIC,UAAW,OAAKN,WAAL,CACEO,WADF,CACc,CAAC,OAAKN,MAAN,CADd,EAC4B,WAD5B,EAEEO,WAFF,CAEc,OAAKP,MAFnB,EAGE4B,KAHF,EAAf;;AAKAvB,oCAAQI,SAAR,GAAoB,aAAK;AACrBN,wCAAQ,mCAAR;AACA,6BAFJ;;AAIAE,oCAAQK,OAAR,GAAkB,aAAK;AACnBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,yCAAP;AACD,6BAHH;AAIA,yBAdG,CAAP;AAeA","file":"NegociacaoDao.js","sourcesContent":["import {Negociacao} from '../models/Negociacao';\r\n\r\nexport class NegociacaoDao{\r\n\r\n    constructor(connection){\r\n\r\n        this._connection = connection;\r\n        this._store ='negociacoes';\r\n    }\r\n\r\n    adiciona(negociacao){\r\n\r\n        return new Promise((resolve,reject) => {\r\n             \r\n         let request =  this._connection\r\n                        .transaction([this._store],'readwrite')\r\n                        .objectStore(this._store)\r\n                        .add(negociacao);\r\n\r\n                        request.onsuccess = e =>{\r\n                             resolve();\r\n                        };\r\n            \r\n                        request.onerror = e =>{\r\n                            console.log(e.target.error);\r\n                            reject('Não foi possivel adicionar a negociacao');\r\n                        };         \r\n\r\n        });\r\n    }\r\n\r\n\r\n    listaTodos(){\r\n        return new Promise((resolve,reject) => {\r\n\r\n\r\n            let cursor = this._connection\r\n                         .transaction([this._store],'readwrite')\r\n                         .objectStore(this._store)\r\n                         .openCursor();\r\n          \r\n            let negociacoes =[];  \r\n\r\n            cursor.onsuccess = e => {\r\n\r\n                let atual = e.target.result;\r\n\r\n                if(atual){\r\n\r\n                    let dado = atual.value;\r\n\r\n                    negociacoes.push(new Negociacao(dado._data,dado._quantidade, dado._valor));\r\n\r\n                    atual.continue();\r\n\r\n                }else{\r\n                    //Quando não há mais dados para carregar, exibe a lista\r\n                resolve(negociacoes);\r\n                  }\r\n            };\r\n   \r\n            cursor.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject('Não foi possivel listar as negociações');\r\n            };\r\n\r\n        });\r\n    }\r\n\r\n   apagaTodos(){\r\n\r\n    return new Promise((resolve,reject) => {\r\n        let request =  this._connection\r\n                        .transaction([this._store],'readwrite')\r\n                        .objectStore(this._store)\r\n                        .clear();\r\n\r\n        request.onsuccess = e => {\r\n            resolve('Negociações removidas com sucesso');\r\n           };\r\n\r\n        request.onerror = e => {\r\n            console.log(e.target.error);\r\n            reject('Não foi possivel remover as negociações');       \r\n          };\r\n       });\r\n   }\r\n}"]}