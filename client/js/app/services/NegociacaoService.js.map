{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","Promise","resolve","reject","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","console","log","erro","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","Error","negociacao","getConnection","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\r\nimport {ConnectionFactory} from './ConnectionFactory';\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\r\nimport {Negociacao} from '../models/Negociacao';\r\n\r\nexport class NegociacaoService{\r\n\r\n    constructor(){\r\n        this._http = new HttpService();\r\n     \r\n    }\r\n\r\n    obterNegociacoesDaSemana(){\r\n        return new Promise((resolve,reject) => {\r\n            this._http\r\n            .get('negociacoes/semana')\r\n            .then(negociacoes =>\r\n                {\r\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade,objeto.valor)));\r\n                })\r\n                .catch(erro =>{\r\n                    console.log(erro);\r\n                    reject('Não foi possivel obter a negociacao da semana.');\r\n                })\r\n            \r\n             });\r\n          }\r\n                     \r\n            obterNegociacoesDaSemanaAnterior(){\r\n\r\n                return new Promise((resolve,reject) => {\r\n                    this._http\r\n                    .get('negociacoes/anterior')\r\n                    .then(negociacoes =>\r\n                        {\r\n                            resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade,objeto.valor)));\r\n                        })\r\n                        .catch(erro =>{\r\n                            console.log(erro);\r\n                            reject('Não foi possivel obter a negociacao da semana anterior.');\r\n                        })\r\n                    \r\n                     });                  \r\n            }\r\n\r\n            obterNegociacoesDaSemanaRetrasada(){\r\n       \r\n                return new Promise((resolve,reject) => {\r\n                    this._http\r\n                    .get('negociacoes/retrasada')\r\n                    .then(negociacoes =>\r\n                        {\r\n                            resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade,objeto.valor)));\r\n                        })\r\n                        .catch(erro =>{\r\n                            console.log(erro);\r\n                            reject('Não foi possivel obter a negociacao da semana retrasada.');\r\n                        })\r\n                    \r\n                     });  \r\n\r\n        }\r\n\r\n\r\n        obterNegociacoes(){\r\n\r\n                return  Promise.all([\r\n                                    this.obterNegociacoesDaSemana(),\r\n                                    this.obterNegociacoesDaSemanaAnterior(),\r\n                                    this.obterNegociacoesDaSemanaRetrasada()\r\n                                ]).then(periodos => {\r\n\r\n                                    let  negociacoes = periodos\r\n                                        .reduce((dados,periodo) => dados.concat(periodo),[])\r\n                                        .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor));\r\n                                    return negociacoes;\r\n                                }).catch(erro => {\r\n                                    throw new Error(erro);\r\n                                });\r\n        }\r\n\r\n\r\n        cadastra(negociacao){\r\n\r\n            return   ConnectionFactory\r\n                    .getConnection()\r\n                    .then(connection => new NegociacaoDao(connection))\r\n                    .then(dao => dao.adiciona(negociacao))\r\n                    .then(() => 'Negociação adicionada com sucesso')\r\n                    .catch(() => { \r\n                        throw new Error('Não foi possivel adicionar a negocição')\r\n                        });  \r\n                   }\r\n\r\n         lista(){\r\n\r\n            return   ConnectionFactory\r\n                    .getConnection()\r\n                    .then(connection => new NegociacaoDao(connection))\r\n                    .then(dao => dao.listaTodos())\r\n                    .catch(erro =>{\r\n                        throw new Error('Não foi possivel obter as negociações')\r\n                    })\r\n         }    \r\n         \r\n         apaga(){\r\n          return  ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => dao.apagaTodos())\r\n                .then(() => 'Negociações apagadas com sucesso')\r\n                .catch(erro => {\r\n                throw new Error('Não foi possivel apagar as negociações')\r\n            });         \r\n         } \r\n         \r\n         async importa(listaAtual) {\r\n\r\n            try {\r\n                 let negociacoes = await this.obterNegociacoes();\r\n             \r\n                 return negociacoes.filter(negociacao => \r\n                    !listaAtual.some(negociacaoExistente => \r\n                   JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)));\r\n             }\r\n             catch (erro) {\r\n                 console.log(erro);\r\n                 throw new Error(\"Não foi possível importar as negociações\");\r\n             }\r\n        }\r\n\r\n    }"]}