{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","resolve","reject","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","erro","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","Error","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService{\r\n\r\n    constructor(){\r\n        this._http = new HttpService();\r\n     \r\n    }\r\n\r\n    obterNegociacoesDaSemana(){\r\n        return new Promise((resolve,reject) => {\r\n            this._http\r\n            .get('negociacoes/semana')\r\n            .then(negociacoes =>\r\n                {\r\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade,objeto.valor)));\r\n                })\r\n                .catch(erro =>{\r\n                    console.log(erro);\r\n                    reject('Não foi possivel obter a negociacao da semana.');\r\n                })\r\n            \r\n             });\r\n          }\r\n                     \r\n            obterNegociacoesDaSemanaAnterior(){\r\n\r\n                return new Promise((resolve,reject) => {\r\n                    this._http\r\n                    .get('negociacoes/anterior')\r\n                    .then(negociacoes =>\r\n                        {\r\n                            resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade,objeto.valor)));\r\n                        })\r\n                        .catch(erro =>{\r\n                            console.log(erro);\r\n                            reject('Não foi possivel obter a negociacao da semana anterior.');\r\n                        })\r\n                    \r\n                     });                  \r\n            }\r\n\r\n            obterNegociacoesDaSemanaRetrasada(){\r\n       \r\n                return new Promise((resolve,reject) => {\r\n                    this._http\r\n                    .get('negociacoes/retrasada')\r\n                    .then(negociacoes =>\r\n                        {\r\n                            resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade,objeto.valor)));\r\n                        })\r\n                        .catch(erro =>{\r\n                            console.log(erro);\r\n                            reject('Não foi possivel obter a negociacao da semana retrasada.');\r\n                        })\r\n                    \r\n                     });  \r\n\r\n        }\r\n\r\n\r\n        obterNegociacoes(){\r\n\r\n                return  Promise.all([\r\n                                    this.obterNegociacoesDaSemana(),\r\n                                    this.obterNegociacoesDaSemanaAnterior(),\r\n                                    this.obterNegociacoesDaSemanaRetrasada()\r\n                                ]).then(periodos => {\r\n\r\n                                    let  negociacoes = periodos\r\n                                        .reduce((dados,periodo) => dados.concat(periodo),[])\r\n                                        .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor));\r\n                                    return negociacoes;\r\n                                }).catch(erro => {\r\n                                    throw new Error(erro);\r\n                                });\r\n        }\r\n\r\n\r\n        cadastra(negociacao){\r\n\r\n            return   ConnectionFactory\r\n                    .getConnection()\r\n                    .then(connection => new NegociacaoDao(connection))\r\n                    .then(dao => dao.adiciona(negociacao))\r\n                    .then(() => 'Negociação adicionada com sucesso')\r\n                    .catch(() => { \r\n                        throw new Error('Não foi possivel adicionar a negocição')\r\n                        });  \r\n                   }\r\n\r\n         lista(){\r\n\r\n            return   ConnectionFactory\r\n                    .getConnection()\r\n                    .then(connection => new NegociacaoDao(connection))\r\n                    .then(dao => dao.listaTodos())\r\n                    .catch(erro =>{\r\n                        throw new Error('Não foi possivel obter as negociações')\r\n                    })\r\n         }    \r\n         \r\n         apaga(){\r\n          return  ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => dao.apagaTodos())\r\n                .then(() => 'Negociações apagadas com sucesso')\r\n                .catch(erro => {\r\n                throw new Error('Não foi possivel apagar as negociações')\r\n            });         \r\n         } \r\n         \r\n         async importa(listaAtual) {\r\n\r\n            try {\r\n                 let negociacoes = await this.obterNegociacoes();\r\n             \r\n                 return negociacoes.filter(negociacao => \r\n                    !listaAtual.some(negociacaoExistente => \r\n                   JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)));\r\n             }\r\n             catch (erro) {\r\n                 console.log(erro);\r\n                 throw new Error(\"Não foi possível importar as negociações\");\r\n             }\r\n        }\r\n\r\n    }"]}