{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoincrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAQ,Y;AAEVC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAER,6CAAa;AAAA;;AACT,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAGoB;;AAElB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;;AAEnC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA6BD,OAA7B,CAAlB;;AAECS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAKAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAE1B,oCAAG,CAAChB,UAAJ,EAAgB;AACZA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAW;AACxB,8CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACL,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AACH,6BAVA;;AAYAO,wCAAYW,OAAZ,GAAsB,aAAK;;AAExBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACF,6BALD;AAMJ,yBA3BM,CAAP;AA4BH;;;kDAEoBtB,U,EAAW;;AAE5BH,+BAAO0B,OAAP,CAAe,iBAAS;AACpB,gCAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EACA1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AACA1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAmC,EAACG,eAAgB,IAAjB,EAAnC;AACH,yBAJD;AAKH;;;sDAEuB;;AAEpB,4BAAG7B,UAAH,EAAc;AACXC;AACAD,yCAAa,IAAb;AACF;AACJ","file":"ConnectionFactory.js","sourcesContent":["\r\nconst stores = ['negociacoes'];\r\nconst version = 3;\r\nconst dbName ='aluraframe';\r\n\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory{\r\n\r\n     constructor(){\r\n         throw new Error('Não é possivel criar instâncias de ConnectionFactory');\r\n     }\r\n\r\n\r\n    static getConnection(){\r\n\r\n        return new Promise((resolve,reject) => {\r\n\r\n            let openRequest = window.indexedDB.open(dbName,version);\r\n             \r\n             openRequest.onupgradeneeded = e => {\r\n                 ConnectionFactory._createStores(e.target.result);\r\n             };\r\n\r\n\r\n             openRequest.onsuccess = e => {\r\n\r\n                if(!connection) {\r\n                    connection = e.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = function() {\r\n                          throw new Error('Você não pode fechar diretamente a conexão');\r\n                    };\r\n                }\r\n                resolve(connection);\r\n            }\r\n    \r\n             openRequest.onerror = e => {\r\n\r\n                console.log(e.target.error);\r\n\r\n                reject(e.target.error.name);\r\n             };\r\n        });\r\n    }\r\n\r\n    static _createStores(connection){\r\n  \r\n        stores.forEach(store => {\r\n            if(connection.objectStoreNames.contains(store)) \r\n            connection.deleteObjectStore(store);\r\n            connection.createObjectStore(store,{autoincrement : true});\r\n        });\r\n    }\r\n\r\n    static closeConnection(){\r\n\r\n        if(connection){\r\n           close();\r\n           connection = null;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n"]}