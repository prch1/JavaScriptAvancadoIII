{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoincrement"],"mappings":";;;;;;AACA,IAAIA,oBAAqB,YAEzB;;AAEA,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAQ,YAAd;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAEK,qCAAa;AAAA;;AACT,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAJN;AAAA;AAAA,4CAO0B;;AAElB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;;AAEnC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA6BD,OAA7B,CAAlB;;AAECQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAFD;;AAKAR,gCAAYS,SAAZ,GAAwB,aAAK;;AAE1B,4BAAG,CAACf,UAAJ,EAAgB;AACZA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAW;AACxB,sCAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACL,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBAVA;;AAYAM,gCAAYW,OAAZ,GAAsB,aAAK;;AAExBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACF,qBALD;AAMJ,iBA3BM,CAAP;AA4BH;AArCL;AAAA;AAAA,0CAuCyBrB,UAvCzB,EAuCoC;;AAE5BH,uBAAOyB,OAAP,CAAe,iBAAS;AACpB,wBAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EACAzB,WAAW0B,iBAAX,CAA6BD,KAA7B;AACAzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAmC,EAACG,eAAgB,IAAjB,EAAnC;AACH,iBAJD;AAKH;AA9CL;AAAA;AAAA,8CAgD4B;;AAEpB,oBAAG5B,UAAH,EAAc;AACXC;AACAD,iCAAa,IAAb;AACF;AACJ;AAtDL;;AAAA;AAAA;AAyDC,CApEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["\r\nvar ConnectionFactory = (function ()\r\n\r\n{\r\n\r\nconst stores = ['negociacoes'];\r\nconst version = 3;\r\nconst dbName ='aluraframe';\r\n\r\nvar connection = null;\r\nvar close = null;\r\n\r\nreturn class ConnectionFactory{\r\n\r\n     constructor(){\r\n         throw new Error('Não é possivel criar instâncias de ConnectionFactory');\r\n     }\r\n\r\n\r\n    static getConnection(){\r\n\r\n        return new Promise((resolve,reject) => {\r\n\r\n            let openRequest = window.indexedDB.open(dbName,version);\r\n             \r\n             openRequest.onupgradeneeded = e => {\r\n                 ConnectionFactory._createStores(e.target.result);\r\n             };\r\n\r\n\r\n             openRequest.onsuccess = e => {\r\n\r\n                if(!connection) {\r\n                    connection = e.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = function() {\r\n                          throw new Error('Você não pode fechar diretamente a conexão');\r\n                    };\r\n                }\r\n                resolve(connection);\r\n            }\r\n    \r\n             openRequest.onerror = e => {\r\n\r\n                console.log(e.target.error);\r\n\r\n                reject(e.target.error.name);\r\n             };\r\n        });\r\n    }\r\n\r\n    static _createStores(connection){\r\n  \r\n        stores.forEach(store => {\r\n            if(connection.objectStoreNames.contains(store)) \r\n            connection.deleteObjectStore(store);\r\n            connection.createObjectStore(store,{autoincrement : true});\r\n        });\r\n    }\r\n\r\n    static closeConnection(){\r\n\r\n        if(connection){\r\n           close();\r\n           connection = null;\r\n        }\r\n    }\r\n\r\n}\r\n})();\r\n\r\n\r\n\r\n"]}